---
import Navigation from '../components/Navigation.astro';
import BackToTop from '../components/BackToTop.astro';
import '../styles/global.css';
import '../styles/terminal.css';
import '../styles/animations.css';

interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
}

const {
  title = 'SolCoder | AI-Powered Solana Development in Minutes',
  description = 'Build and deploy Solana dApps with plain English. No Rust required. Open-source CLI agent with built-in wallet, knowledge base, and auto-deploy.',
  ogImage = '/og-image-terminal.png',
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta
      name="keywords"
      content="Solana, AI coding agent, blockchain development, Anchor, Rust, CLI tool, dApp builder, Web3, DeFi"
    />
    <meta name="author" content="SolCoder Community" />
    <link rel="canonical" href={canonicalURL} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.site)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.site)} />

    <!-- Favicons -->
    <link rel="icon" type="image/png" href="/favicons/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicons/favicon.svg" />
    <link rel="shortcut icon" href="/favicons/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="SolCoder" />
    <link rel="manifest" href="/favicons/site.webmanifest" />

    <!-- Theme Color -->
    <meta name="theme-color" content="#0E0E0E" />

    <!-- Fonts - Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;700&family=Space+Grotesk:wght@400;500;600;700&family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />

    <!-- Preload critical assets -->
    <!-- <link rel="preload" as="image" href="/noise-texture.png" /> -->

    <!-- Structured Data (JSON-LD) -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "SoftwareApplication",
      "name": "SolCoder",
      "applicationCategory": "DeveloperApplication",
      "operatingSystem": "macOS, Linux, Windows",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
      },
      "description": "AI-powered CLI for building Solana dApps with natural language",
      "url": "https://solcoder.dev",
      "author": {
        "@type": "Organization",
        "name": "SolCoder Community"
      },
      "softwareVersion": "1.0",
      "datePublished": "2024-11-21",
      "license": "https://opensource.org/licenses/MIT"
    })} />

    <!-- Analytics (Netlify Analytics is configured via netlify.toml) -->
  </head>
  <body class="scanline-effect">
    <Navigation />
    <slot />
    <BackToTop />

    <!-- Scroll Animation Script -->
    <script>
      // Intersection Observer for scroll-triggered animations
      const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1,
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('active');
          }
        });
      }, observerOptions);

      // Observe all elements with .scroll-animate class
      document.addEventListener('DOMContentLoaded', () => {
        const elements = document.querySelectorAll('.scroll-animate');
        elements.forEach((el) => observer.observe(el));
      });
    </script>

    <!-- Enhanced Scroll Navigation -->
    <script>
      import { initScrollNavigation } from '../scripts/scroll-navigation';

      document.addEventListener('DOMContentLoaded', () => {
        initScrollNavigation();
      });
    </script>
  </body>
</html>
